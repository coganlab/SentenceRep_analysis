# %%
import os
from ieeg.io import get_data
from ieeg.viz.ensemble import plot_dist
import torch
import numpy as np
import slicetca
import matplotlib.pyplot as plt
from functools import partial
import pickle

# --- Add import for shared loading functions ---
from analysis.load import load_tensor, load_spec, load_hg, split_and_stack


os.environ["CUBLAS_WORKSPACE_CONFIG"] = ":4096:8"
os.environ["TORCH_ALLOW_TF32_CUBLAS_OVERRIDE"] = "1"
torch.set_float32_matmul_precision("medium")

exclude = ["D0063-RAT1", "D0063-RAT2", "D0063-RAT3", "D0063-RAT4",
           "D0053-LPIF10", "D0053-LPIF11", "D0053-LPIF12", "D0053-LPIF13",
           "D0053-LPIF14", "D0053-LPIF15", "D0053-LPIF16",
           "D0027-LPIF6", "D0027-LPIF7", "D0027-LPIF8", "D0027-LPIF9",
           "D0027-LPIF10"]

labels1 = ('D0005-LTG14', 'D0005-LTG15', 'D0005-LTG16', 'D0005-LTG21', 'D0005-LTG22', 'D0005-LTG24', 'D0005-LTG26', 'D0005-LTG30', 'D0005-LTG31', 'D0005-LTG3', 'D0005-LTG4', 'D0005-LTG5', 'D0005-LTG6', 'D0005-LTG7', 'D0005-LTG8', 'D0005-MST1', 'D0005-MST2', 'D0005-MST4', 'D0005-PST1', 'D0005-PST2', 'D0005-PST3', 'D0005-PST4', 'D0007-RAMF4', 'D0007-RAMF5', 'D0007-RASF3', 'D0007-RASF6', 'D0007-RFG1', 'D0007-RFG2', 'D0007-RFG3', 'D0007-RFG4', 'D0007-RFG5', 'D0007-RFG6', 'D0007-RFG7', 'D0007-RFG8', 'D0007-RFG11', 'D0007-RFG12', 'D0007-RFG13', 'D0007-RFG14', 'D0007-RFG15', 'D0007-RFG18', 'D0007-RFG19', 'D0007-RFG20', 'D0007-RFG21', 'D0007-RFG22', 'D0007-RFG23', 'D0007-RFG28', 'D0007-RFG29', 'D0007-RFG33', 'D0007-RFG34', 'D0007-RFG35', 'D0007-RFG36', 'D0007-RFG37', 'D0007-RFG41', 'D0007-RFG43', 'D0007-RFG44', 'D0007-RFG45', 'D0007-RFG46', 'D0007-RFG47', 'D0007-RFG51', 'D0007-RFG54', 'D0007-RFG57', 'D0007-RFG58', 'D0007-RFG59', 'D0007-RFG60', 'D0007-RFG63', 'D0007-RMIH1', 'D0007-RMIH2', 'D0007-RMIH3', 'D0007-RMIH4', 'D0007-RPIH1', 'D0007-RPIH3', 'D0007-RPPH2', 'D0007-RPPH4', 'D0008-LB3', 'D0008-LB4', 'D0008-LB5', 'D0008-LB6', 'D0008-LB7', 'D0008-LB8', 'D0008-LC1', 'D0008-LC2', 'D0008-LC3', 'D0008-LC4', 'D0008-LC6', 'D0008-LC7', 'D0008-LC8', 'D0008-LC9', 'D0008-LC10', 'D0008-LD3', 'D0008-LD4', 'D0008-LD5', 'D0008-LD6', 'D0008-LD7', 'D0008-LD8', 'D0008-LD9', 'D0008-LD10', 'D0008-RA4', 'D0008-RA5', 'D0008-RA6', 'D0008-RA8', 'D0008-RB1', 'D0008-RB3', 'D0008-RB4', 'D0008-RB5', 'D0008-RB6', 'D0008-RB7', 'D0008-RB8', 'D0008-RC1', 'D0008-RC4', 'D0008-RC5', 'D0008-RC6', 'D0008-RC7', 'D0008-RC8', 'D0008-RD1', 'D0008-RD3', 'D0008-RD4', 'D0008-RD5', 'D0008-RD6', 'D0008-RD8', 'D0008-RD9', 'D0008-RE2', 'D0008-RE3', 'D0008-RE4', 'D0008-RE5', 'D0008-RE6', 'D0008-RE7', 'D0008-RE8', 'D0008-RF3', 'D0008-RF4', 'D0008-RF5', 'D0008-RF6', 'D0008-RF7', 'D0008-RF8', 'D0008-RF9', 'D0008-RF10', 'D0008-RG2', 'D0008-RG3', 'D0008-RG4', 'D0008-RG5', 'D0008-RG6', 'D0008-RG7', 'D0009-LAMT4', 'D0009-LMIF1', 'D0009-LMIF2', 'D0009-LMIF4', 'D0009-LMIF5', 'D0009-LMIF6', 'D0009-LMIF7', 'D0009-LMIF8', 'D0009-LMIF10', 'D0009-LMMF3', 'D0009-LMMF5', 'D0009-LMMF7', 'D0009-LMST4', 'D0009-LMST5', 'D0009-LPMT1', 'D0009-LPMT3', 'D0009-LPMT5', 'D0009-LPMT7', 'D0009-LPMT10', 'D0009-LPSF1', 'D0009-LPSF3', 'D0009-LPSF5', 'D0009-LPSF7', 'D0009-RMIF1', 'D0009-RMIF2', 'D0009-RMIF3', 'D0009-RMIF4', 'D0009-RMIF5', 'D0009-RMIF6', 'D0009-RMIF8', 'D0009-RMIF9', 'D0009-RMMF3', 'D0009-RMPT3', 'D0009-RMPT4', 'D0009-RMPT10', 'D0009-RMST5', 'D0009-RMST6', 'D0009-RMST7', 'D0009-RMST8', 'D0009-RMST9', 'D0009-RMST10', 'D0015-RASF8', 'D0015-RASF9', 'D0015-RASF10', 'D0015-LAMF3', 'D0015-LAMF4', 'D0015-LAMF5', 'D0015-LAMF6', 'D0015-LAMF7', 'D0015-LAMF8', 'D0015-LAMF10', 'D0015-LMMF2', 'D0015-LMMF3', 'D0015-LMMF4', 'D0015-LMMF5', 'D0015-LMMF6', 'D0015-LMMF7', 'D0015-LMMF8', 'D0015-LMMF9', 'D0015-LMMF10', 'D0015-LPIF1', 'D0015-LPIF2', 'D0015-LPIF3', 'D0015-LPIF4', 'D0015-LPIF5', 'D0015-LPIF6', 'D0015-LPIF7', 'D0015-LPIF8', 'D0015-LPIF9', 'D0015-LPIF10', 'D0015-LMST1', 'D0015-LMST5', 'D0015-LMST6', 'D0015-LMST7', 'D0015-LMST8', 'D0015-LMST9', 'D0015-LMST10', 'D0015-LPST1', 'D0015-LPST2', 'D0015-LPST3', 'D0015-LPST4', 'D0015-LPST5', 'D0015-LPST6', 'D0015-LPST7', 'D0015-LPST8', 'D0015-LPST9', 'D0015-LPST10', 'D0015-LAMT1', 'D0015-LAMT2', 'D0015-LAMT4', 'D0015-LAMT5', 'D0015-LAMT6', 'D0015-LAMT7', 'D0015-LAMT8', 'D0015-LAMT9', 'D0015-LAIT1', 'D0017-RASF1', 'D0017-RASF2', 'D0017-RASF3', 'D0017-RASF4', 'D0017-RASF5', 'D0017-RASF6', 'D0017-RASF7', 'D0017-RASF8', 'D0017-RASF9', 'D0017-RMSF1', 'D0017-RMSF2', 'D0017-RMSF3', 'D0017-RMSF4', 'D0017-RMSF5', 'D0017-RMSF6', 'D0017-RMSF7', 'D0017-RMSF8', 'D0017-RPSF1', 'D0017-RPSF4', 'D0017-RPSF5', 'D0017-RPSF6', 'D0017-RPSF7', 'D0017-RPSF8', 'D0017-RPSF9', 'D0017-RPSF10', 'D0017-RAMF1', 'D0017-RAMF2', 'D0017-RAMF3', 'D0017-RAMF4', 'D0017-RAMF6', 'D0017-RPMF1', 'D0017-RPMF2', 'D0017-RPMF3', 'D0017-RPMF4', 'D0017-RPMF5', 'D0017-RPMF6', 'D0017-RPMF7', 'D0017-RPMF8', 'D0017-RAIF1', 'D0017-RAIF2', 'D0017-RAIF3', 'D0017-RAIF6', 'D0017-RAIF7', 'D0017-RAIF8', 'D0017-RAIF9', 'D0017-RMIF1', 'D0017-RMIF3', 'D0017-RMIF6', 'D0017-RMIF7', 'D0017-RMIF8', 'D0017-RMIF9', 'D0017-RPIF1', 'D0017-RPIF3', 'D0017-RPIF5', 'D0017-RPIF6', 'D0017-RPIF7', 'D0017-RPIF8', 'D0017-RPIF9', 'D0017-RPIF10', 'D0017-LASF4', 'D0017-LASF5', 'D0017-LASF6', 'D0017-LASF7', 'D0017-LASF8', 'D0017-LASF9', 'D0017-LASF10', 'D0017-LMSF1', 'D0017-LMSF2', 'D0017-LMSF3', 'D0017-LMSF4', 'D0017-LMSF5', 'D0017-LMSF6', 'D0017-LMSF7', 'D0017-LMSF8', 'D0017-LPSF1', 'D0017-LPSF2', 'D0017-LPSF4', 'D0017-LPSF5', 'D0017-LPSF6', 'D0017-LPSF7', 'D0017-LPSF8', 'D0017-LMMF1', 'D0017-LMMF2', 'D0017-LMMF3', 'D0017-LMMF4', 'D0018-LASF7', 'D0018-LASF12', 'D0018-LMSF1', 'D0018-LMSF4', 'D0018-LPIF3', 'D0018-LPIF6', 'D0018-LPIF7', 'D0018-LPIF8', 'D0018-LPMF1', 'D0018-LPMF2', 'D0018-LPMF7', 'D0018-LPMT5', 'D0018-LPMT6', 'D0018-LPSF9', 'D0018-RAST6', 'D0018-RAST7', 'D0018-RAST8', 'D0018-RAST9', 'D0018-RMSF4', 'D0018-RPMT4', 'D0018-RPMT7', 'D0018-RPMT8', 'D0018-RPSF1', 'D0018-RPSF2', 'D0020-LAIF7', 'D0020-LAMF3', 'D0020-LAOF1', 'D0020-LAOF5', 'D0020-LAOF7', 'D0020-LASF1', 'D0020-LASF4', 'D0020-LASF6', 'D0020-LMIF3', 'D0020-LMIF4', 'D0020-LMIF5', 'D0020-LMIF6', 'D0020-LMIF7', 'D0020-LMIF8', 'D0020-LMIF9', 'D0020-LMIF10', 'D0020-LPIF2', 'D0020-LPIF6', 'D0020-LPIF7', 'D0020-LPIF9', 'D0020-LPMF5', 'D0020-LPMF6', 'D0020-LPMF8', 'D0020-LPSF1', 'D0020-LPSF7', 'D0020-LPSF8', 'D0020-RAIF2', 'D0020-RAIF3', 'D0020-RAIF4', 'D0020-RAIF5', 'D0020-RMSF7', 'D0020-RMSF10', 'D0020-RPIF3', 'D0020-RPIF4', 'D0022-LMSF1', 'D0022-LMSF2', 'D0022-LMSF9', 'D0022-LAMF1', 'D0022-LAMF2', 'D0022-LAMF3', 'D0022-LAMF4', 'D0022-LAMF5', 'D0022-LAMF6', 'D0022-LMIF1', 'D0022-LMIF2', 'D0022-LMIF4', 'D0022-LMIF5', 'D0022-LMIF6', 'D0022-LMIF7', 'D0022-LPSF2', 'D0022-LPSF3', 'D0022-LPSF4', 'D0022-LPSF5', 'D0022-LPSF6', 'D0022-LPSF7', 'D0022-LPSF8', 'D0022-LPSF9', 'D0022-LPSF10', 'D0022-LPMF1', 'D0022-LPMF2', 'D0022-LPMF3', 'D0022-LPMF4', 'D0022-LPMF5', 'D0022-LPMF7', 'D0022-LPMF8', 'D0022-LPIF1', 'D0022-LPIF3', 'D0022-LPIF4', 'D0022-LPIF5', 'D0022-LPIF6', 'D0022-LPIF7', 'D0022-LPIF8', 'D0022-LPIF10', 'D0022-LASP3', 'D0022-LASP4', 'D0022-LASP5', 'D0022-LASP6', 'D0022-LASP7', 'D0022-LMSP2', 'D0022-LMSP3', 'D0022-LMSP4', 'D0022-LMSP5', 'D0022-LMSP6', 'D0022-LMSP7', 'D0022-LMSP8', 'D0022-LAMP1', 'D0022-LAMP3', 'D0022-LAMP4', 'D0022-LAMP5', 'D0022-LAMP7', 'D0022-LAIP1', 'D0022-LAIP3', 'D0022-LAIP4', 'D0022-LAIP5', 'D0022-LAIP7', 'D0022-LAIP8', 'D0023-RASF11', 'D0023-RMSF1', 'D0023-RMSF2', 'D0023-RMSF3', 'D0023-RMSF4', 'D0023-RMSF5', 'D0023-RMSF6', 'D0023-RMSF7', 'D0023-RMSF8', 'D0023-RPSF1', 'D0023-RPSF2', 'D0023-RPSF3', 'D0023-RPSF4', 'D0023-RPSF6', 'D0023-RPSF7', 'D0023-RPSF8', 'D0023-RPSF9', 'D0023-RPSF10', 'D0023-RPSF11', 'D0023-RAMF12', 'D0023-RAMF13', 'D0023-RAMF14', 'D0023-R1MF3', 'D0023-R1MF9', 'D0023-R1MF11', 'D0023-R1MF12', 'D0023-R1MF13', 'D0023-R1MF14', 'D0023-R1MF15', 'D0023-R1MF16', 'D0023-R2MF1', 'D0023-R2MF2', 'D0023-R2MF3', 'D0023-R2MF4', 'D0023-R2MF5', 'D0023-R2MF6', 'D0023-R2MF7', 'D0023-R2MF8', 'D0023-R2MF9', 'D0023-R2MF10', 'D0023-R2MF11', 'D0023-R2MF12', 'D0023-R2MF13', 'D0023-R2MF14', 'D0023-R2MF16', 'D0023-RPMF1', 'D0023-RPMF2', 'D0023-RPMF3', 'D0023-RPMF4', 'D0023-RPMF6', 'D0023-RPMF11', 'D0023-RPMF12', 'D0023-RPMF13', 'D0023-RPMF15', 'D0023-RPMF16', 'D0023-RAIF2', 'D0023-RAIF3', 'D0023-RAIF11', 'D0023-RAIF12', 'D0023-R2IF2', 'D0023-R2IF3', 'D0023-R2IF4', 'D0023-R2IF5', 'D0023-R2IF6', 'D0023-R2IF7', 'D0023-R2IF8', 'D0023-R2IF9', 'D0023-RPIF1', 'D0023-RPIF2', 'D0023-RPIF3', 'D0023-RPIF4', 'D0023-RPIF5', 'D0023-RPIF7', 'D0023-RPIF8', 'D0023-RPIF9', 'D0023-RPIF10', 'D0024-LOF1', 'D0024-LOF2', 'D0024-LOF3', 'D0024-LTG2', 'D0024-LTG3', 'D0024-LTG4', 'D0024-LTG5', 'D0024-LTG6', 'D0024-LTG7', 'D0024-LTG8', 'D0024-LTG13', 'D0024-LTG14', 'D0024-LTG15', 'D0024-LTG16', 'D0024-LTG17', 'D0024-LTG20', 'D0024-LTG24', 'D0024-LTG28', 'D0024-LTG30', 'D0024-LAST2', 'D0024-LAST4', 'D0024-LPST1', 'D0024-LPST2', 'D0026-RTG22', 'D0026-RTG24', 'D0026-RTG27', 'D0026-RTG28', 'D0026-RTG36', 'D0026-RTG37', 'D0026-RTG38', 'D0026-RTG39', 'D0026-RTG44', 'D0026-RTG45', 'D0026-RTG46', 'D0026-RTG47', 'D0026-RTG48', 'D0026-RPG17', 'D0026-RPG18', 'D0026-RPG19', 'D0026-RPG20', 'D0026-RPG21', 'D0026-RPG22', 'D0026-RPG23', 'D0026-RPG24', 'D0026-RPG25', 'D0026-RPG26', 'D0026-RPG27', 'D0026-RPG28', 'D0026-RPG29', 'D0026-RPG31', 'D0026-RPG32', 'D0026-RPG33', 'D0026-RPG34', 'D0026-RPG35', 'D0026-RPG36', 'D0026-RPG37', 'D0026-RPG38', 'D0026-RPG40', 'D0026-RPST1', 'D0026-RPST2', 'D0027-LMMT1', 'D0027-LMMT2', 'D0027-LMMT3', 'D0027-LMMT5', 'D0027-LMMT7', 'D0027-LMMT9', 'D0027-LPMT1', 'D0027-LPMT2', 'D0027-LPMT3', 'D0027-LMST1', 'D0027-LMST2', 'D0027-LMST3', 'D0027-LMST4', 'D0027-LMST5', 'D0027-LMST6', 'D0027-LMST7', 'D0027-LPST1', 'D0027-LPST5', 'D0027-LPST6', 'D0027-LPST7', 'D0027-LPST8', 'D0027-LPST9', 'D0027-LPST10', 'D0027-LAIF2', 'D0027-LAIF3', 'D0027-LAIF5', 'D0027-LAIF6', 'D0027-LAIF7', 'D0027-LAIF8', 'D0027-LAIF9', 'D0027-LAMF1', 'D0027-LAMF2', 'D0027-LAMF3', 'D0027-LAMF4', 'D0027-LAMF5', 'D0027-LAMF6', 'D0027-LPIF1', 'D0027-LPIF4', 'D0027-LPIF5', 'D0027-LMSF1', 'D0027-LMSF2', 'D0027-LMSF3', 'D0027-LMSF4', 'D0027-LMSF5', 'D0027-LMSF6', 'D0027-LMSF7', 'D0027-LMSF8', 'D0027-LPSF8', 'D0027-LAI3', 'D0027-LAI4', 'D0027-LAI5', 'D0027-LAI6', 'D0027-LPI1', 'D0027-LPI2', 'D0027-LPI3', 'D0027-LPI4', 'D0027-LPI5', 'D0027-LPI6', 'D0027-LPI7', 'D0027-LPI8', 'D0027-LPI9', 'D0028-LPMT4', 'D0028-LPMT5', 'D0028-LMST1', 'D0028-LMST2', 'D0028-LMST3', 'D0028-LPST2', 'D0028-LPST3', 'D0028-LPST4', 'D0028-LAIO1', 'D0028-LAIO2', 'D0028-LAIO3', 'D0028-LAIO4', 'D0028-LAIO5', 'D0028-LPIO4', 'D0028-LPIO5', 'D0028-LPIO6', 'D0028-LPIO7', 'D0028-LAMO1', 'D0028-LAMO2', 'D0028-LAMO3', 'D0028-LAMO4', 'D0028-LAMO5', 'D0028-LAMO6', 'D0028-LAMO7', 'D0028-LAMO8', 'D0028-LAIF1', 'D0028-LAIF2', 'D0028-LAIF3', 'D0028-LAIF4', 'D0028-LAIF6', 'D0028-LAIF7', 'D0028-LAMF2', 'D0028-LAMF3', 'D0028-LAMF4', 'D0028-LAMF5', 'D0028-LAMF6', 'D0028-LAMF7', 'D0028-LAMF8', 'D0028-LPMF1', 'D0028-LPMF3', 'D0028-LPMF5', 'D0028-LPMF6', 'D0028-LPMF7', 'D0028-LPMF8', 'D0028-LPMF9', 'D0028-LPMF10', 'D0028-LAI1', 'D0028-LAI2', 'D0028-LAI3', 'D0028-LAI4', 'D0028-LAI6', 'D0028-LAI7', 'D0028-LAI8', 'D0028-LAI9', 'D0028-LPI1', 'D0028-LPI2', 'D0028-LPI3', 'D0028-LPI5', 'D0028-LPI6', 'D0028-LPI8', 'D0028-LPI9', 'D0029-LASF1', 'D0029-LASF2', 'D0029-LASF5', 'D0029-LASF7', 'D0029-LMSF1', 'D0029-LMSF2', 'D0029-LMSF3', 'D0029-LMSF4', 'D0029-LMSF5', 'D0029-LMSF6', 'D0029-LMSF7', 'D0029-LMSF8', 'D0029-LPSF1', 'D0029-LPSF2', 'D0029-LPSF3', 'D0029-LPSF4', 'D0029-LPSF5', 'D0029-LPSF6', 'D0029-LPSF7', 'D0029-LPSF8', 'D0029-LPSF9', 'D0029-LMMF1', 'D0029-LMMF2', 'D0029-LMMF3', 'D0029-LMMF4', 'D0029-LMMF5', 'D0029-LMMF6', 'D0029-LMMF7', 'D0029-LMMF8', 'D0029-LMMF9', 'D0029-LPMF1', 'D0029-LPMF2', 'D0029-LPMF3', 'D0029-LPMF4', 'D0029-LPMF5', 'D0029-LPMF6', 'D0029-LPMF7', 'D0029-LPMF8', 'D0029-LPMF9', 'D0029-LASP3', 'D0029-LASP4', 'D0029-LASP5', 'D0029-LASP6', 'D0029-LASP7', 'D0029-LASP10', 'D0029-LAIP1', 'D0029-LAIP2', 'D0029-LAIP3', 'D0029-LAIP4', 'D0029-LAIP5', 'D0029-LAIP6', 'D0029-LAIP7', 'D0029-LAIP8', 'D0029-LAIP9', 'D0029-RASF1', 'D0029-RASF2', 'D0029-RASF4', 'D0029-RASF8', 'D0029-RMSF1', 'D0029-RMSF2', 'D0029-RMSF3', 'D0029-RMSF4', 'D0029-RMSF5', 'D0029-RMSF6', 'D0029-RMSF7', 'D0029-RMSF8', 'D0029-RMSF9', 'D0029-RMSF10', 'D0029-RPSF1', 'D0029-RPSF2', 'D0029-RPSF3', 'D0029-RPSF4', 'D0029-RPSF5', 'D0029-RPSF6', 'D0029-RPSF7', 'D0029-RPSF8', 'D0029-RMMF2', 'D0029-RMMF3', 'D0029-RMMF4', 'D0029-RMMF5', 'D0029-RMMF6', 'D0029-RMMF7', 'D0029-RMMF8', 'D0029-RMMF9', 'D0029-RPMF1', 'D0029-RPMF2', 'D0029-RPMF3', 'D0029-RPMF4', 'D0029-RPMF5', 'D0029-RPMF6', 'D0029-RPMF7', 'D0029-RPMF9', 'D0029-RASP4', 'D0029-RASP5', 'D0029-RASP6', 'D0029-RASP7', 'D0029-RASP8', 'D0029-RAIP1', 'D0029-RAIP2', 'D0029-RAIP3', 'D0029-RAIP4', 'D0029-RAIP5', 'D0029-RAIP6', 'D0029-RAIP8', 'D0031-LASF1', 'D0031-LASF2', 'D0031-LASF6', 'D0031-LMSF3', 'D0031-LMSF4', 'D0031-LMSF5', 'D0031-LMSF6', 'D0031-LMSF7', 'D0031-LMSF8', 'D0031-LPSF1', 'D0031-LPSF3', 'D0031-LPSF5', 'D0031-LMMF3', 'D0031-LMMF4', 'D0031-LMMF5', 'D0031-LPMF4', 'D0031-LPMF6', 'D0031-LPMF7', 'D0031-LPMF8', 'D0031-LAIF1', 'D0031-LAIF2', 'D0031-LAIF6', 'D0031-LAIF7', 'D0031-LSP2', 'D0031-LSP5', 'D0031-LSP7', 'D0031-LIP4', 'D0031-LIP5', 'D0031-RASF1', 'D0031-RASF2', 'D0031-RASF3', 'D0031-RMSF3', 'D0031-RMSF4', 'D0031-RMSF5', 'D0031-RMSF6', 'D0031-RPSF1', 'D0031-RMMF2', 'D0031-RMMF3', 'D0031-RMMF5', 'D0031-RPMF1', 'D0031-RPMF2', 'D0031-RPMF8', 'D0031-RAIF2', 'D0031-RAIF3', 'D0031-RAIF4', 'D0031-RAIF5', 'D0031-RAIF6', 'D0031-RAIF7', 'D0031-RAIF8', 'D0031-RAIF9', 'D0031-RSP5', 'D0031-RSP10', 'D0031-RIP3', 'D0031-RIP5', 'D0031-RIP7', 'D0053-LOF9', 'D0053-LAIF2', 'D0053-LAIF7', 'D0053-LAIF8', 'D0053-LAIF9', 'D0053-LAIF10', 'D0053-LAIF11', 'D0053-LPIF1', 'D0053-LPIF2', 'D0053-LPIF5', 'D0053-LPIF6', 'D0053-LPIF8', 'D0053-LPIF9', 'D0053-LPI3', 'D0053-LPI4', 'D0053-LPI5', 'D0053-LPI6', 'D0053-LPI7', 'D0053-LPI8', 'D0053-LPI9', 'D0053-LPI10', 'D0053-LPI11', 'D0053-LPI12', 'D0053-LPI13', 'D0053-LPI14', 'D0053-LPI15', 'D0053-RAIF6', 'D0053-RAIF8', 'D0053-RAIF9', 'D0053-RAIF10', 'D0053-RAIF11', 'D0053-RAIF12', 'D0053-RAIF14', 'D0053-RPIF5', 'D0053-RPIF8', 'D0053-RPIF9', 'D0053-RPIF10', 'D0053-RPIF11', 'D0053-RPIF12', 'D0053-RPIF13', 'D0053-RPIF14', 'D0053-RPIF15', 'D0053-RPI1', 'D0053-RPI2', 'D0053-RPI3', 'D0053-RPI4', 'D0053-RPI5', 'D0053-RPI7', 'D0053-RPI8', 'D0053-RPI9', 'D0053-RPI10', 'D0053-RPI11', 'D0053-RPI12', 'D0053-RPI13', 'D0053-RPMT8', 'D0053-RPMT9', 'D0053-RPMT10', 'D0053-RPMT11', 'D0053-RPMT12', 'D0053-RPMT13', 'D0053-RPMT14', 'D0053-RPMT15', 'D0053-RPMT16', 'D0057-RAI1', 'D0057-RAI2', 'D0057-RAI3', 'D0057-RAI4', 'D0057-RAI5', 'D0057-RAI6', 'D0057-RAI7', 'D0057-RAI8', 'D0057-RAI9', 'D0057-RAI10', 'D0057-RAI11', 'D0057-RAI14', 'D0057-RAI15', 'D0057-RPI3', 'D0057-RPI5', 'D0057-RPI6', 'D0057-RPI7', 'D0057-RPI8', 'D0057-RPI9', 'D0057-RPI10', 'D0057-RPI11', 'D0057-RPI12', 'D0057-RPI13', 'D0057-RPI14', 'D0057-RAIF1', 'D0057-RAIF2', 'D0057-RAIF3', 'D0057-RAIF4', 'D0057-RAIF5', 'D0057-RAIF6', 'D0057-RAIF7', 'D0057-RAIF11', 'D0057-RAIF12', 'D0057-RAIF13', 'D0057-RAIF14', 'D0057-RAMF1', 'D0057-RAMF2', 'D0057-RAMF3', 'D0057-RAMF4', 'D0057-RAMF5', 'D0057-RAMF6', 'D0057-RAMF7', 'D0057-RAMF8', 'D0057-RAMF9', 'D0057-RAMF14', 'D0057-RMMF2', 'D0057-RMMF3', 'D0057-RMMF14', 'D0057-RMMF15', 'D0057-RMMF16', 'D0057-RPIP2', 'D0057-RPIP3', 'D0057-RPIP4', 'D0057-RPIP5', 'D0057-RPIP6', 'D0057-RPIP7', 'D0057-RPIP8', 'D0057-RPIP9', 'D0057-RPIP10', 'D0057-RPIP11', 'D0057-RPIP12', 'D0057-RPIP13', 'D0057-RPIP14', 'D0057-RAST1', 'D0057-RAST2', 'D0057-RAST3', 'D0057-RAST4', 'D0057-RAST5', 'D0057-RAST6', 'D0057-RAST7', 'D0057-RAST8', 'D0057-RMMT1', 'D0057-RMMT3', 'D0057-RMMT4', 'D0057-RMMT5', 'D0057-RMMT6', 'D0057-RMMT7', 'D0057-RMMT8', 'D0057-RMMT9', 'D0057-RMMT10', 'D0057-RMMT11', 'D0057-RMMT12', 'D0057-RPMT1', 'D0057-RPMT2', 'D0057-RPMT3', 'D0057-RPMT4', 'D0057-RPMT5', 'D0057-RPMT9', 'D0057-RPMT10', 'D0057-RPIT1', 'D0057-RPIT2', 'D0057-RPIT3', 'D0057-RPIT5', 'D0057-RPIT6', 'D0057-RPIT7', 'D0057-RPIT8', 'D0057-RPIT9', 'D0057-RPIT10', 'D0057-RPIT11', 'D0057-RPIT12', 'D0059-LMSF1', 'D0059-LMSF2', 'D0059-LMSF3', 'D0059-LMSF4', 'D0059-LMSF5', 'D0059-LMSF6', 'D0059-LMSF8', 'D0059-LMSF9', 'D0059-LMSF10', 'D0059-LMSF11', 'D0059-LMSF12', 'D0059-LMMF1', 'D0059-LMMF2', 'D0059-LMMF3', 'D0059-LMMF4', 'D0059-LMMF5', 'D0059-LMMF6', 'D0059-LMMF7', 'D0059-LMMF8', 'D0059-LMMF9', 'D0059-LMMF10', 'D0059-LMMF11', 'D0059-LMMF12', 'D0059-LPSF2', 'D0059-LPSF4', 'D0059-LPSF5', 'D0059-LPSF6', 'D0059-LPSF7', 'D0059-LPSF8', 'D0059-LPSF9', 'D0059-LPSF10', 'D0059-LPSF11', 'D0059-LPSF12', 'D0059-LPSF13', 'D0059-LPSF14', 'D0059-LPSF15', 'D0059-LPSF16', 'D0059-LMPF1', 'D0059-LMPF2', 'D0059-LMPF3', 'D0059-LMPF4', 'D0059-LMPF5', 'D0059-LMPF6', 'D0059-LMPF7', 'D0059-LMPF8', 'D0059-LMPF9', 'D0059-LMPF10', 'D0059-LMPF11', 'D0059-LMPF12', 'D0059-LPIF6', 'D0059-LPIF7', 'D0059-LPIF9', 'D0059-LASP4', 'D0059-LASP10', 'D0059-LASP11', 'D0059-LASP13', 'D0059-LASP14', 'D0059-LASP15', 'D0059-LASP16', 'D0059-LAIP15', 'D0059-LAT1', 'D0059-LAT2', 'D0059-LAT3', 'D0059-LMPT11', 'D0059-LPT1', 'D0059-LPT2', 'D0059-LPT3', 'D0059-LPT4', 'D0059-LPT16', 'D0060-LPIF1', 'D0060-LPIF4', 'D0060-LPIF5', 'D0060-LPIF6', 'D0060-LPIF11', 'D0060-LPIF12', 'D0060-LPIF13', 'D0060-LPIF14', 'D0060-LPIF15', 'D0060-LPIF16', 'D0060-LPIP1', 'D0060-LPIP4', 'D0060-LPIP9', 'D0060-LPIP10', 'D0060-LPIP11', 'D0060-LPIP12', 'D0060-LPIP13', 'D0060-LPIP14', 'D0060-LPIP15', 'D0060-LPIP16', 'D0060-LI3', 'D0060-LI5', 'D0060-LI6', 'D0060-LI7', 'D0060-LI8', 'D0060-LI9', 'D0060-LI10', 'D0060-LI11', 'D0060-LI12', 'D0060-LI13', 'D0060-LPST1', 'D0060-LPST2', 'D0060-LPST3', 'D0060-LPST4', 'D0060-LPST5', 'D0060-LPST6', 'D0060-LPST7', 'D0060-LPST8', 'D0060-LMMT7', 'D0060-LMMT8', 'D0060-LMMT9', 'D0060-LMMT10', 'D0060-LMMT11', 'D0060-LMMT12', 'D0060-LPMT1', 'D0060-LPMT2', 'D0060-LPMT3', 'D0060-LPMT4', 'D0060-LPMT5', 'D0060-LPMT6', 'D0060-LPMT7', 'D0060-LPMT8', 'D0060-LPMT9', 'D0060-LPMT10', 'D0060-LPMT11', 'D0060-LPMT12', 'D0060-LPMT13', 'D0060-LPIT1', 'D0060-LPIT2', 'D0060-LPIT3', 'D0060-LPIT4', 'D0060-LPIT5', 'D0060-LPIT6', 'D0060-LPIT7', 'D0060-LPIT8', 'D0060-LPIT9', 'D0060-LPIT10', 'D0060-LPIT11', 'D0060-LPIT13', 'D0060-LPIT14', 'D0060-RPIF1', 'D0060-RPIF2', 'D0060-RPIF4', 'D0060-RPIF9', 'D0060-RPIF10', 'D0060-RPIF11', 'D0060-RPIF12', 'D0060-RPIF14', 'D0060-RPIF15', 'D0060-RPIF16', 'D0060-RPIP1', 'D0060-RPIP2', 'D0060-RPIP3', 'D0060-RPIP9', 'D0060-RPIP10', 'D0060-RPIP11', 'D0060-RPIP12', 'D0060-RPIP14', 'D0060-RPIP15', 'D0060-RPIP16', 'D0060-RI4', 'D0060-RI5', 'D0060-RI6', 'D0060-RI7', 'D0060-RI8', 'D0060-RI9', 'D0060-RI10', 'D0060-RI11', 'D0060-RI12', 'D0060-RI13', 'D0060-RPST1', 'D0060-RPST2', 'D0060-RPST3', 'D0060-RPST4', 'D0060-RPST5', 'D0060-RPST6', 'D0060-RPST7', 'D0060-RPST8', 'D0060-RPST9', 'D0060-RPST10', 'D0060-RMMT6', 'D0060-RMMT7', 'D0060-RMMT8', 'D0060-RMMT9', 'D0060-RMMT10', 'D0060-RMMT11', 'D0060-RMMT12', 'D0060-RMMT13', 'D0060-RPMT2', 'D0060-RPMT3', 'D0060-RPMT5', 'D0060-RPMT6', 'D0060-RPMT7', 'D0060-RPMT8', 'D0060-RPMT9', 'D0060-RPMT10', 'D0060-RPMT11', 'D0060-RPMT12', 'D0060-RPMT13', 'D0060-RPMT14', 'D0060-RPIT1', 'D0060-RPIT2', 'D0060-RPIT3', 'D0060-RPIT4', 'D0060-RPIT5', 'D0060-RPIT6', 'D0060-RPIT7', 'D0060-RPIT10', 'D0060-RPIT11', 'D0060-RPIT12', 'D0061-LAMF5', 'D0061-LAMF6', 'D0061-LAMF7', 'D0061-LAMF8', 'D0061-LAMF9', 'D0061-LAMF10', 'D0061-LAMF11', 'D0061-LMMF1', 'D0061-LMMF2', 'D0061-LMMF3', 'D0061-LMMF10', 'D0061-LMMF11', 'D0061-LMMF12', 'D0061-LMMF13', 'D0061-LMMF14', 'D0061-LPMF2', 'D0061-LPMF3', 'D0061-LPMF4', 'D0061-LPMF6', 'D0061-LPMF7', 'D0061-LPMF9', 'D0061-LPMF10', 'D0061-LPMF11', 'D0061-LPMF12', 'D0061-LPMF13', 'D0061-LPMF14', 'D0061-LPMF15', 'D0061-LPMF16', 'D0061-LAIF5', 'D0061-LAIF6', 'D0061-LAIF7', 'D0061-LAIF8', 'D0061-LAIF9', 'D0061-LAIF10', 'D0061-LAIF11', 'D0061-LAIF12', 'D0061-LAIF13', 'D0061-LAIF14', 'D0061-LAIF15', 'D0061-LPIF3', 'D0061-LPIF4', 'D0061-LPIF5', 'D0061-LPIF6', 'D0061-LPIF7', 'D0061-LPIF8', 'D0061-LPIF9', 'D0061-LPIF10', 'D0061-LPIF11', 'D0061-LPIF12', 'D0061-LPIF13', 'D0061-LPIF14', 'D0061-LPIF15', 'D0061-LPIF16', 'D0061-LAIP2', 'D0061-LAIP4', 'D0061-LAIP5', 'D0061-LAIP6', 'D0061-LAIP7', 'D0061-LAIP8', 'D0061-LAIP9', 'D0061-LAIP10', 'D0061-LAIP11', 'D0061-LAIP12', 'D0061-LAIP13', 'D0061-LAIP14', 'D0061-LAIP15', 'D0061-LAIP16', 'D0061-LOF7', 'D0061-LOF9', 'D0061-LOF10', 'D0061-LAI4', 'D0061-LAI7', 'D0061-LAI8', 'D0061-LAI9', 'D0061-LAI10', 'D0061-LAI11', 'D0061-LAI12', 'D0061-LAI13', 'D0061-LAI14', 'D0061-LAI15', 'D0061-LAI16', 'D0061-LPI5', 'D0061-LPI6', 'D0061-LPI8', 'D0061-LPI9', 'D0061-LPI10', 'D0061-LPI11', 'D0061-LPI12', 'D0061-LPI13', 'D0061-LPI14', 'D0061-LPI15', 'D0061-LPI16', 'D0061-LPST1', 'D0061-LPST2', 'D0061-LPST3', 'D0061-LPST4', 'D0061-LPST5', 'D0061-LPST6', 'D0061-LPST7', 'D0061-LPIT4', 'D0061-LPIT5', 'D0061-LPIT7', 'D0061-RPMF1', 'D0061-RPMF2', 'D0061-RPMF3', 'D0061-RPMF4', 'D0061-RPMF7', 'D0061-RPMF8', 'D0061-RPMF9', 'D0061-RPMF10', 'D0061-RPMF11', 'D0061-RPMF12', 'D0061-RPMF13', 'D0061-RPMF14', 'D0061-RPMF15', 'D0061-RPMF16', 'D0061-RMST3', 'D0061-RMST7', 'D0061-RMST11', 'D0063-LOF7', 'D0063-LOF8', 'D0063-LMSF1', 'D0063-LMSF2', 'D0063-LMSF3', 'D0063-LMSF4', 'D0063-LMSF8', 'D0063-LMSF9', 'D0063-LPSF1', 'D0063-LPSF2', 'D0063-LPSF3', 'D0063-LPSF4', 'D0063-LPSF5', 'D0063-LPSF6', 'D0063-LPSF7', 'D0063-LPSF8', 'D0063-LPSF9', 'D0063-LPSF10', 'D0063-LPSF11', 'D0063-LPSF12', 'D0063-LMMT1', 'D0063-LMMT5', 'D0063-LMMT9', 'D0063-LMMT10', 'D0063-LMMT11', 'D0063-LMMT13', 'D0063-LMMT14', 'D0063-ROF13', 'D0063-ROF14', 'D0063-ROF16', 'D0063-RAI1', 'D0063-RAI4', 'D0063-RAI5', 'D0063-RAI6', 'D0063-RAI7', 'D0063-RAI8', 'D0063-RAI9', 'D0063-RAI10', 'D0063-RAI11', 'D0063-RASF3', 'D0063-RASF12', 'D0063-RASF13', 'D0063-RASF14', 'D0063-RASF15', 'D0063-RASF16', 'D0063-RMSF2', 'D0063-RMSF3', 'D0063-RMSF4', 'D0063-RMSF5', 'D0063-RMSF6', 'D0063-RMSF7', 'D0063-RMSF8', 'D0063-RPSF1', 'D0063-RPSF3', 'D0063-RPSF4', 'D0063-RPSF5', 'D0063-RPSF6', 'D0063-RPSF7', 'D0063-RPSF8', 'D0063-RPSF9', 'D0063-RPSF10', 'D0063-RPSF11', 'D0063-RPSF12', 'D0063-RPSF13', 'D0063-RPSF14', 'D0063-RAMF4', 'D0063-RAMF11', 'D0063-RAMF13', 'D0063-RAMF14', 'D0063-RMMF9', 'D0063-RMMF11', 'D0063-RMMF13', 'D0063-RMMF14', 'D0063-RAT11', 'D0063-RAT12', 'D0063-RAT13', 'D0063-RAT14', 'D0063-RAMT1', 'D0063-RAMT2', 'D0063-RAMT3', 'D0063-RAMT4', 'D0063-RAMT5', 'D0063-RAMT6', 'D0063-RAMT7', 'D0063-RMMT1', 'D0063-RMMT2', 'D0063-RMMT3', 'D0063-RMMT7', 'D0063-RMMT8', 'D0063-RMMT9', 'D0063-RMMT10', 'D0063-RMMT11', 'D0063-RMMT12', 'D0063-RMMT13', 'D0063-RMIT1', 'D0063-RMIT2', 'D0063-RMIT3', 'D0063-RMIT11', 'D0064-LOF3', 'D0064-LOF4', 'D0064-LOF7', 'D0064-LOF8', 'D0064-LOF9', 'D0064-LOF10', 'D0064-LOF11', 'D0064-LOF12', 'D0064-LOF13', 'D0064-LAIF1', 'D0064-LAIF2', 'D0064-LAIF3', 'D0064-LAIF4', 'D0064-LAIF5', 'D0064-LAIF6', 'D0064-LAIF7', 'D0064-LAIF8', 'D0064-LMIF1', 'D0064-LMIF2', 'D0064-LMIF3', 'D0064-LMIF4', 'D0064-LMIF5', 'D0064-LMIF6', 'D0064-LMIF7', 'D0064-LMIF8', 'D0064-LMIF9', 'D0064-LAIP1', 'D0064-LAIP2', 'D0064-LAIP3', 'D0064-LAIP4', 'D0064-LAIP5', 'D0064-LAIP6', 'D0064-LAIP7', 'D0064-LAIP8', 'D0064-LAIP9', 'D0064-LAIP10', 'D0064-LAIP11', 'D0064-LAIP13', 'D0064-LPIP1', 'D0064-LPIP2', 'D0064-LPIP3', 'D0064-LPIP4', 'D0064-LPIP6', 'D0064-LPIP7', 'D0064-LPIP8', 'D0064-LPIP10', 'D0064-LPIP11', 'D0064-LPIP12', 'D0064-LPIP13', 'D0064-LAI3', 'D0064-LAI4', 'D0064-LAI5', 'D0064-LAI6', 'D0064-LAI7', 'D0064-LAI8', 'D0064-LAI9', 'D0064-LAI10', 'D0064-LAI11', 'D0064-LAI12', 'D0064-LAI13', 'D0064-LAI14', 'D0064-LAI15', 'D0064-LAST1', 'D0064-LAST6', 'D0064-LAST7', 'D0064-LAST8', 'D0064-LAST9', 'D0064-LAST10', 'D0064-LAST11', 'D0064-L2ST1', 'D0064-L2ST2', 'D0064-L2ST3', 'D0064-L2ST4', 'D0064-L2ST5', 'D0064-L2ST6', 'D0064-L2ST7', 'D0064-L2ST8', 'D0064-L2ST9', 'D0064-L2ST10', 'D0064-LPST1', 'D0064-LPST2', 'D0064-LPST3', 'D0064-LPST4', 'D0064-LPST6', 'D0064-LPST7', 'D0064-LAMT1', 'D0064-LAMT3', 'D0064-LAMT4', 'D0064-LAMT5', 'D0064-LAMT6', 'D0064-LAMT7', 'D0064-LAMT8', 'D0064-LAMT10', 'D0064-LAMT12', 'D0064-LMMT1', 'D0064-LMMT2', 'D0064-LMMT3', 'D0064-LMMT4', 'D0064-LMMT5', 'D0064-LMMT6', 'D0064-LMMT7', 'D0064-LMMT8', 'D0064-LMMT9', 'D0064-LMMT10', 'D0064-LMMT11', 'D0064-LMMT12', 'D0064-LMMT13', 'D0064-LMMT14', 'D0064-LMMT15', 'D0064-LMMT16', 'D0064-LPMT1', 'D0064-LPMT2', 'D0064-LPMT3', 'D0064-LPMT4', 'D0064-LPMT5', 'D0064-LPMT6', 'D0064-LAIT1', 'D0064-LAIT9', 'D0064-LPIT1', 'D0064-LPIT2', 'D0064-LPIT3', 'D0064-LPIT4', 'D0064-LPIT5', 'D0064-LPIT6', 'D0064-LPIT7', 'D0064-LPIT8', 'D0064-LPIT9', 'D0064-LPIT10', 'D0064-LPIT11', 'D0064-LPIT12', 'D0066-RPSP1', 'D0066-RPSP2', 'D0066-RPSP7', 'D0066-RPSP8', 'D0066-RPSP9', 'D0066-RPSP10', 'D0066-RPSP11', 'D0066-RPSP12', 'D0066-RPMP1', 'D0066-RPMP4', 'D0066-RPMP5', 'D0066-RPMP6', 'D0066-RPMP7', 'D0066-RPMP8', 'D0066-RPMP9', 'D0066-RPMP10', 'D0066-RPMP11', 'D0066-RPMP12', 'D0066-RPMP15', 'D0066-RPMP16', 'D0066-RPIP2', 'D0066-RPIP3', 'D0066-RPIP5', 'D0066-RPIP6', 'D0066-RPIP7', 'D0066-RPIP8', 'D0066-RPIP9', 'D0066-RPIP14', 'D0066-RPIP15', 'D0066-RPIP16', 'D0066-ROAS1', 'D0066-ROAS2', 'D0066-ROAS3', 'D0066-ROAS4', 'D0066-ROAS5', 'D0066-ROAS6', 'D0066-ROAS7', 'D0066-ROAS8', 'D0066-ROAS9', 'D0066-ROAS10', 'D0066-ROAS13', 'D0066-ROAM1', 'D0066-ROAM2', 'D0066-ROAM3', 'D0066-ROAM11', 'D0066-ROPM2', 'D0066-ROPM3', 'D0066-ROPM6', 'D0066-ROPM9', 'D0066-ROAI2', 'D0066-ROAI3', 'D0066-ROAI5', 'D0066-ROAI6', 'D0066-ROAI8', 'D0066-ROAI9', 'D0066-ROAI10', 'D0066-ROAI11', 'D0066-ROAI12', 'D0066-ROAI13', 'D0066-ROAI14', 'D0066-ROPI1', 'D0066-ROPI10', 'D0066-ROPI11', 'D0066-ROPI12', 'D0066-RTPS1', 'D0066-RTPS2', 'D0066-RTPS3', 'D0066-RTPS5', 'D0066-RTPS6', 'D0066-RTPS7', 'D0066-RTPS8', 'D0066-RTPS9', 'D0066-RTPS10', 'D0066-RTAM1', 'D0066-RTAM2', 'D0066-RTAM3', 'D0066-RTAM4', 'D0066-RTAM5', 'D0066-RTAM6', 'D0066-RTAM7', 'D0066-RTAM14', 'D0066-RTMM3', 'D0066-RTMM6', 'D0066-RTMM7', 'D0066-RTMM9', 'D0066-RTMM10', 'D0066-RTMM11', 'D0066-RTPM1', 'D0066-RTPM4', 'D0066-RTPM6', 'D0066-RTPM7', 'D0066-RTPM8', 'D0066-RTPM9', 'D0066-RTPM10', 'D0066-RTPM11', 'D0066-RTPM12', 'D0066-RTPM13', 'D0066-RTPM14', 'D0066-RTAI1', 'D0066-RTAI2', 'D0066-RTAI3', 'D0066-RTAI4', 'D0066-RTAI5', 'D0066-RTAI6', 'D0066-RTAI7', 'D0066-RTAI8', 'D0066-RTPI2', 'D0066-RTPI3', 'D0069-LPS11', 'D0069-LTAS1', 'D0069-LTAS2', 'D0069-LTAS3', 'D0069-LTAS5', 'D0069-LTAS6', 'D0069-LTAS7', 'D0069-LTAS8', 'D0069-LTAS9', 'D0069-LTMS1', 'D0069-LTMS2', 'D0069-LTMS3', 'D0069-LTMS4', 'D0069-LTMS5', 'D0069-LTMS6', 'D0069-LTMS7', 'D0069-LTMS8', 'D0069-LTMS9', 'D0069-LTPS1', 'D0069-LTPS2', 'D0069-LTPS3', 'D0069-LTPS4', 'D0069-LTPS5', 'D0069-LTPS6', 'D0069-LTPS7', 'D0069-LTPS8', 'D0069-LTPS9', 'D0069-LTPS10', 'D0069-LTPM1', 'D0069-LTPM5', 'D0069-LTPM7', 'D0069-LTPM10', 'D0069-LTMI10', 'D0069-LTPI4', 'D0069-LTPI5', 'D0069-LTPI6', 'D0069-LTPI7', 'D0069-LTPI8', 'D0069-LTPI9', 'D0069-LTPI10', 'D0070-LFO4', 'D0070-LFAI1', 'D0070-LFAI2', 'D0070-LFAI7', 'D0070-LFAI8', 'D0070-LFAI9', 'D0070-LFAI10', 'D0070-LFPI2', 'D0070-LFPI4', 'D0070-LFPI5', 'D0070-LFPI6', 'D0070-LFPI7', 'D0070-LFPI8', 'D0070-LFPI9', 'D0070-LFPI10', 'D0070-LFPI11', 'D0070-LIA3', 'D0070-LIA5', 'D0070-LIA7', 'D0070-LIA8', 'D0070-LIA9', 'D0070-LIA11', 'D0070-LIA12', 'D0070-LIA13', 'D0070-LIA14', 'D0070-LIP2', 'D0070-LIP3', 'D0070-LIP4', 'D0070-LIP5', 'D0070-LIP6', 'D0070-LIP7', 'D0070-LIP8', 'D0070-LIP9', 'D0070-LIP10', 'D0070-LIP11', 'D0070-LTMS1', 'D0070-LTMS2', 'D0070-LTMS3', 'D0070-LTMS4', 'D0070-LTMS5', 'D0070-LTMS6', 'D0070-LTPS1', 'D0070-LTPS2', 'D0070-LTPS3', 'D0070-LTPS4', 'D0070-LTPS5', 'D0070-LTPS6', 'D0070-LTAM2', 'D0070-LTAM3', 'D0070-LTMM9', 'D0070-LTMM10', 'D0070-LTMP2', 'D0070-LTMP9', 'D0070-LTAI1', 'D0070-LTAI2', 'D0070-LTAI3', 'D0070-LTPI2', 'D0070-LTPI10', 'D0070-RFO2', 'D0070-RFAI7', 'D0070-RFAI8', 'D0070-RFAI9', 'D0070-RTAM1', 'D0070-RTAM2', 'D0070-RTAM3', 'D0070-RTAM4', 'D0070-RTAM5', 'D0070-RTAM6', 'D0070-RTAM7', 'D0070-RTAM8', 'D0070-RTMM3', 'D0070-RTMM4', 'D0070-RTMM5', 'D0070-RTMM6', 'D0070-RTMM7', 'D0070-RTMM8', 'D0070-RTMM9', 'D0073-LFAP2', 'D0073-LFAP3', 'D0073-LFAP6', 'D0073-LFAP7', 'D0073-LFAP8', 'D0073-LFAP9', 'D0073-LFAP10', 'D0073-LFAS1', 'D0073-LFAS2', 'D0073-LFAS3', 'D0073-LFAS4', 'D0073-LFAS5', 'D0073-LFAS6', 'D0073-LFAS8', 'D0073-LFAS10', 'D0073-LFMS1', 'D0073-LFMS2', 'D0073-LFMS3', 'D0073-LFMS4', 'D0073-LFMS5', 'D0073-LFMS7', 'D0073-LFMS8', 'D0073-LFMS9', 'D0073-LFMS10', 'D0073-LFPS1', 'D0073-LFPS2', 'D0073-LFPS3', 'D0073-LFPS4', 'D0073-LFPS5', 'D0073-LFPS6', 'D0073-LFPS7', 'D0073-LFPS8', 'D0073-LFPS9', 'D0073-LFPS10', 'D0073-LFL1', 'D0073-LFL2', 'D0073-LFL3', 'D0073-LFL4', 'D0073-LFL5', 'D0073-LFL6', 'D0073-LFL7', 'D0073-LFL8', 'D0073-LFL9', 'D0073-LFL10', 'D0073-LPL1', 'D0073-LPL2', 'D0073-LPL3', 'D0073-LPL4', 'D0073-LPL5', 'D0073-LPL9', 'D0073-LPL10', 'D0073-LPL11', 'D0073-LPAS1', 'D0073-LPAS3', 'D0073-LPAS4', 'D0073-LPAS8', 'D0073-LPAS9', 'D0073-LPMS1', 'D0073-LPMS5', 'D0073-LPMS6', 'D0073-LPMS7', 'D0073-LPMS8', 'D0073-LPMS11', 'D0073-LPMS12', 'D0073-LPPS2', 'D0073-LPPS3', 'D0073-LPPS6', 'D0073-LPPS7', 'D0073-LPPS8', 'D0073-LPPS9', 'D0073-LPPS10', 'D0073-LPPS11', 'D0073-LPPS12', 'D0073-LFAM2', 'D0073-LFAM3', 'D0073-LFAM4', 'D0073-LFAM5', 'D0073-LFAM6', 'D0073-LFAM7', 'D0073-LFAM8', 'D0073-LFAM9', 'D0073-LFAM10', 'D0073-LFAM11', 'D0073-LFAM12', 'D0073-LFMM1', 'D0073-LFMM2', 'D0073-LFMM3', 'D0073-LFMM4', 'D0073-LFMM5', 'D0073-LFMM6', 'D0073-LFMM7', 'D0073-LFMM8', 'D0073-LFMM9', 'D0073-LFMM10', 'D0073-LFMM11', 'D0073-LFMM12', 'D0073-LFMM13', 'D0073-LFMM14', 'D0073-LFMM15', 'D0073-LFPM1', 'D0073-LFPM2', 'D0073-LFPM3', 'D0073-LFPM4', 'D0073-LFPM5', 'D0073-LFPM6', 'D0073-LFPM7', 'D0073-LFPM10', 'D0073-LFPM11', 'D0073-LFPM12', 'D0073-LFPM13', 'D0073-LFPM14', 'D0073-LPAM1', 'D0073-LPAM2', 'D0073-LPAM3', 'D0073-LPAM4', 'D0073-LPAM5', 'D0073-LPAM6', 'D0073-LPAM7', 'D0073-LPAM8', 'D0073-LPAM9', 'D0073-LPAM10', 'D0073-LPAM11', 'D0073-LPAM12', 'D0073-LPAM13', 'D0073-LPAM14', 'D0073-LPMM1', 'D0073-LPMM2', 'D0073-LPMM3', 'D0073-LPMM4', 'D0073-LPMM5', 'D0073-LPMM6', 'D0073-LPMM7', 'D0073-LPMM8', 'D0073-LPMM9', 'D0073-LPMM10', 'D0073-LPMM11', 'D0073-LPMM12', 'D0073-LPMM13', 'D0073-LPMM14', 'D0073-LPMM15', 'D0073-LFAI1', 'D0073-LFAI2', 'D0073-LFAI3', 'D0073-LFAI5', 'D0073-LFAI6', 'D0073-LFAI7', 'D0073-LFAI8', 'D0073-LFAI9', 'D0073-LFAI10', 'D0073-LFAI11', 'D0073-LFAI12', 'D0073-LFAI13', 'D0081-LFO1', 'D0081-LFO2', 'D0081-LFO3', 'D0081-LFO4', 'D0081-LFO5', 'D0081-LFO6', 'D0081-LFO7', 'D0081-LFO8', 'D0081-LFO9', 'D0081-LFO10', 'D0081-LFO11', 'D0081-LFO12', 'D0081-LFO13', 'D0081-LFO14', 'D0081-LFO15', 'D0081-LFO16', 'D0081-LFMS1', 'D0081-LFMS3', 'D0081-LFMS4', 'D0081-LFMS5', 'D0081-LFMS6', 'D0081-LFMS7', 'D0081-LFMS8', 'D0081-LFMS11', 'D0081-LFMS12', 'D0081-LFPS9', 'D0081-LFPS13', 'D0081-LFPS14', 'D0081-LPAS1', 'D0081-LPAS2', 'D0081-LPAS4', 'D0081-LPAS5', 'D0081-LPAS6', 'D0081-LPAS7', 'D0081-LPAS8', 'D0081-LPAS9', 'D0081-LPAS10', 'D0081-LFAM2', 'D0081-LFAM3', 'D0081-LFAM4', 'D0081-LFAM6', 'D0081-LFAM7', 'D0081-LFAM8', 'D0081-LFAM9', 'D0081-LFAM10', 'D0081-LFAM12', 'D0081-LFMM1', 'D0081-LFMM2', 'D0081-LFMM3', 'D0081-LFMM4', 'D0081-LFMM5', 'D0081-LFMM6', 'D0081-LFMM9', 'D0081-LFMM10', 'D0081-LFMM11', 'D0081-LFMM12', 'D0081-LFMM13', 'D0081-LPAM12', 'D0081-LPAM13', 'D0081-LAI1', 'D0081-LAI2', 'D0081-LAI3', 'D0081-LAI4', 'D0081-LAI5', 'D0081-LAI6', 'D0081-LAI7', 'D0081-LAI8', 'D0081-LAI9', 'D0081-LAI10', 'D0081-LAI11', 'D0081-LPI1', 'D0081-LPI2', 'D0081-LPI3', 'D0081-LPI4', 'D0081-LPI5', 'D0081-LPI6', 'D0081-LPI7', 'D0081-LPI8', 'D0081-LPI9', 'D0081-LPI10', 'D0081-LPI11', 'D0081-LPI12', 'D0081-LPI13', 'D0081-LPI14', 'D0081-LPI15', 'D0081-LTMS1', 'D0081-LTMS2', 'D0081-LTMS3', 'D0081-LTMS4', 'D0081-LTMS5', 'D0081-LTMS6', 'D0081-LTMS7', 'D0081-LTPS1', 'D0081-LTPS2', 'D0081-LTPS3', 'D0081-LTPS4', 'D0081-LTPS5', 'D0081-LTPS6', 'D0081-LTPS7', 'D0081-LTPS8', 'D0100-LTPM1', 'D0100-LTPM2', 'D0100-LTPM3', 'D0100-LTPM4', 'D0100-LTPM6', 'D0100-LTOJ10', 'D0100-LTOJ11', 'D0100-LTOJ12', 'D0100-LTPS10', 'D0100-LTPS11', 'D0100-LTPS14', 'D0100-LTPS15', 'D0100-LTPS16', 'D0100-LTPS17', 'D0100-LTPS18', 'D0100-LTPI10', 'D0100-LOAI11', 'D0100-LOAI12', 'D0100-LOPI6', 'D0100-LOPI7', 'D0100-LOPI8', 'D0100-LOPI9', 'D0100-LOPI10', 'D0100-LOAM3', 'D0100-LOMM7', 'D0100-LOMM8', 'D0100-LOMM9', 'D0100-LOMM10', 'D0100-LOMM14', 'D0100-LOPM4', 'D0100-LOPM5', 'D0100-LOPM6', 'D0100-LOPM7', 'D0100-LOPM8', 'D0100-LOPM9', 'D0100-LOPM10', 'D0100-LOAS1', 'D0100-LOAS8', 'D0100-LOPS2', 'D0100-LPAI8', 'D0100-LPPI2', 'D0100-LPPI3', 'D0100-LPPI4', 'D0100-LPPI5', 'D0100-LPPI6', 'D0100-LPPI7', 'D0100-LPPI8', 'D0100-LPPI9', 'D0102-LTPM2', 'D0102-LTPM8', 'D0102-LTPM9', 'D0102-LTPM10', 'D0102-LTPM11', 'D0102-LTPM12', 'D0102-LTPM13', 'D0102-RFO10')


HOME = os.path.expanduser("~")
if 'SLURM_ARRAY_TASK_ID' in os.environ.keys():
    LAB_root = os.path.join(HOME, "workspace", "CoganLab")
    n = int(os.environ['SLURM_ARRAY_TASK_ID'])
    print(n)
else:  # if not then set box directory
    LAB_root = os.path.join(HOME, "Box", "CoganLab")
    n = 1

log_dir = os.path.join(os.path.dirname(LAB_root), 'logs', str(n))
if not os.path.exists(log_dir):
    os.makedirs(log_dir)
layout = get_data('SentenceRep', root=LAB_root)

conds_all = {"resp": (-1, 1), "aud_ls": (-0.5, 1.5),
                 "aud_lm": (-0.5, 1.5), "aud_jl": (-0.5, 1.5),
                 "go_ls": (-0.5, 1.5), "go_lm": (-0.5, 1.5),
                 "go_jl": (-0.5, 1.5)}


def to_plot(mode, W, H, neural_data, timings, i, cond, j = 0):
    if mode == 'weights':
        data = H[i, j, ..., timings[cond]]
    elif mode == 'components':
        data = model.construct_single_component(0, i).to(torch.float32).detach().cpu().numpy()[
        (W[i] / W.sum(0)) > 0.5][
            :, j, ..., timings[cond]
        ].reshape(-1, 200)
    else:
        data = (neural_data[..., timings[cond]] * W[i, :, None, None, None])[(W[i] / W.sum(0)) > 0.5].nanmean(axis=(1,2)).detach().cpu().numpy()
    return data

def plot_components(model, mode = 'weights', neural_data = None, plot_latencies = True):
    assert mode in ('weights', 'components', 'weighted')
    assert mode in ('weights', 'components') or neural_data is not None
    colors = ['orange', 'y', 'k', 'c', 'm', 'deeppink',
              'darkorange', 'lime', 'blue', 'red', 'purple']
    W, H = model.get_components(numpy=True)[0]
    # W2 = (np.cov(
    #     model.forward().detach().cpu().numpy().reshape(W.shape[1],
    #                                                    -1)) @ W.T).T
    # H2 = H @ np.cov(
    #     model.forward().detach().cpu().numpy().reshape(-1, H.shape[-1]),
    #     rowvar=False)
    timings = {'aud_ls': slice(0, 200),
               'go_ls': slice(200, 400)}
    n_components = W.shape[0]
    # idx_name = 'SM'
    colors = colors[:n_components]
    conds = {'aud_ls': (-0.5, 1.5),
             'go_ls': (-0.5, 1.5)}
    fig, axs = plt.subplots(1, 2, figsize=(10, 4), dpi=100)
    ylims = [0, 0]
    # make a plot for each condition in conds as a subgrid
    for j, (cond, times) in enumerate(conds.items()):
        ax = axs[j]
        for i in range(n_components):
            plot_dist(
                to_plot(mode, W, H, neural_data, timings, i, cond),
                # model.construct_single_component(0, i).to(torch.float32).detach().cpu().numpy()[
                # (W[i] / W.sum(0)) > 0.5][
                #     ..., 0, timings[cond]
                # ].reshape(-1, len(timings[cond])),
                # (all_con[:, 0, :, timings[cond]] * W[i, :, None,
                #                                    None]).nanmean(axis=0).detach().cpu().numpy(),
                ax=ax, color=colors[i], mode='sem', times=times,
                label=f"Component {colors[i]}")

        if cond.startswith('go'):
            event = "Go Cue"
        elif cond.startswith('aud'):
            event = "Stimulus"
        if j == 0:
            # ax.legend()
            ax.set_ylabel("Z-Score (V)")

        ax.set_xlabel("Time(s) from " + event)
        ylim = ax.get_ylim()
        ylims[1] = max(ylim[1], ylims[1])
        ylims[0] = min(ylim[0], ylims[0])
        # ax.set_title(cond)
    if not plot_latencies:
        return fig, axs
    for j, (cond, times) in enumerate(conds.items()):
        ax = axs[j]
        ax.set_ylim(ylims)
        positions = np.linspace((ylims[0] + ylims[1])* 4 / 5, ylims[1], n_components)
        width = (positions[1] - positions[0])
        positions -= width / 2
        for i in range(n_components):
            # make a horizontal boxplot of the peak times
            data = to_plot(mode, W, H, neural_data, timings, i, cond)
            ttimes = np.linspace(times[0], times[1], data.shape[-1])
            peak_times = ttimes[data.argmax(axis=-1)]
            ax.boxplot(peak_times, vert=False, manage_ticks=False,
                       positions=[positions[i]], # whis=[15, 85],
                       widths=(positions[1] - positions[0])/2,
                       patch_artist=True, boxprops=dict(facecolor=colors[i]),
                       medianprops=dict(color='k', alpha=0.5), showfliers=False)
    return fig, axs

def plot_data(chn_label: str, labels, data_tensor):
    chn = labels[0].find(chn_label)
    freqs = np.array([float(l) for l in labels[1]])
    data = np.nanmean(data_tensor[chn, np.where(np.logical_and(150 > freqs, freqs > 70)), :, :200].detach().cpu().numpy(), axis=(0, 1))
    # data = neural_data_tensor[chn, :, :200].detach().cpu().numpy()
    ax = plot_dist(data,
                   mode='std', linewidth=4, times=(-0.5, 1.5))
    plot_dist(data.T[None],
              mode='std', ax=ax, linewidth=0.5, times=(-0.5, 1.5))
    fig, axs = plt.subplots(5, 7)
    j = 0
    for i in range(data_tensor.shape[2]):
        idx = i - j
        ax = axs[idx // 7, idx % 7]
        data = data_tensor[chn, :, i, :200].detach().cpu().numpy()
        if np.isnan(data).any():
            j += 1
            continue
        ax.imshow(data, aspect='auto', origin='lower',)
        ax.set_xticks([])
        ax.set_yticks([])
        ax.axvline(50, color='k', linestyle='--')
        plot_dist(data,
                  mode='std', linewidth=4, times=(-0.5, 1.5), ax=ax)
        plot_dist(data.T[None],
                  mode='std', ax=ax, linewidth=0.5, times=(-0.5, 1.5))


# %% decompose
decompose = True
if decompose:
    # folder = 'stats_freq_hilbert'
    # filemask = os.path.join(layout.root, 'derivatives', folder, 'combined',
    #                         'mask')
    # sigs = LabeledArray.fromfile(filemask)
    # idxs = {'SM': SM, 'AUD': AUD, 'PROD': PROD, 'sig_chans': sig_chans,
    #         'delay': delay}
    # filename = os.path.join(layout.root, 'derivatives', folder, 'combined',
    #                         'zscore')
    # zscores = LabeledArray.fromfile(filename, mmap_mode='r')
    conds = ['aud_ls', 'go_ls', 'aud_lm', 'go_lm', 'aud_jl', 'go_jl']
    idx_name = 'sig_chans'
    with open(r'C:\Users\ae166\Downloads\8-19-25\results_'
              f'{idx_name}_unbatched_spec_4ranks_L1Loss_0.0002_1.pkl',
              'rb') as f:
        results = pickle.load(f)
    loss_grid = np.array(list(results.values()))
    seed_grid = np.array(list(results.keys()))
    # n_components = (np.unravel_index(np.argmin(loss_grid), loss_grid.shape))[0] + 1
    n_components = 4
    best_seed = seed_grid[np.argmin(loss_grid[seed_grid[:,0] == n_components]), -1]
    # best_seed = None
    n_components = (n_components,)
    # _, _, labels, idxs = load_hg('SM', conds)

    # neural_data_tensor, mask, labels = load_tensor(zscores, SM, conds, 4, 1)
    neural_data_tensor, mask, labels, idxs = load_spec(idx_name, conds, layout,
                                                       'stats_freq_hilbert')
    # plot_data('D0005-PST3', labels, neural_data_tensor)
    # neural_data_jl, _, _ = load_tensor(zscores, SM, conds_jl, 4, 1)
    # trial_av = neural_data_tensor.nanmean(1, dtype=torch.float32)
    all_con = split_and_stack(neural_data_tensor, -1, 1, 3)
    # all_con = torch.cat([all_con[..., :150], all_con[..., 200:]], dim=-1)
    all_mask = split_and_stack(mask, -1, 1, 3)
    # all_mask = torch.cat([all_mask[..., :150], all_mask[..., 200:]], dim=-1)
    trial_av = torch.zeros(all_con.shape[:-2] + (all_con.shape[-1],), dtype=torch.float32)
    for i in range(all_con.shape[0]):
        trial_av[i] = all_con[i].nanmean(-2, dtype=torch.float32)
    # trial_av = all_con.nanmean(-2, dtype=torch.float32)
    # from tslearn.metrics import gamma_soft_dtw
    # gammas = torch.tensor([
    #     gamma_soft_dtw(torch.nanmean(all_con[i, 0], 1).detach().cpu().numpy(), 400)
    #     for i in range(all_con.shape[0])
    # ])
    # neural_data_tensor = neural_data_tensor.to(torch.bfloat16)

    n = 0
    # %%
    # raise RuntimeError("Stop here")
    filename = "model_All_freq.pt"
    if os.path.exists(filename):
        model = slicetca.core.SliceTCA(
            dimensions=list(trial_av.shape),
            ranks=(n_components[0], 0, 0, 0),
            positive=True,
            initialization='uniform-positive',
            dtype=torch.float32,
            lr=1e-3,
            weight_decay=partial(torch.optim.Adam, eps=1e-9),
            loss=torch.nn.L1Loss(reduction='mean'),
            init_bias=0.1,
            threshold=None,
            patience=None
        )
    else:
        losses, model = slicetca.decompose(
            trial_av,
            # neural_data_tensor,
            # all_con,
            # n_components,
            (n_components[0], 0, 0, 0),
            seed=best_seed,
            positive=True,
            # min_std=9e-3,
            # iter_std=20,
            learning_rate=1e-3,
            max_iter=100000,
            # batch_dim=3,
            # batch_prop=0.1,
            # batch_prop_decay=5,
            # weight_decay=partial(torch.optim.RMSprop,
            #                      eps=1e-9,
            #                      momentum=0.9,
            #                      # alpha=0.5,
            #                      centered=True,
            #                      weight_decay=1e-4),
            # weight_decay=partial(torch.optim.Rprop),#, etas=(0.5, 1.2), step_sizes=(1e-8, 1)),
            weight_decay=partial(torch.optim.Adam,
                                    # betas=(0.5, 0.5),
                                    # amsgrad=True,
                                    eps=1e-9,
                                    # weight_decay=1e-6
                                 ),
            # weight_decay=partial(torch.optim.LBFGS, max_eval=200,
            #                      tolerance_grad=1e-6,
            #                      line_search_fn='strong_wolfe'),
            # mask=mask,
            # mask=all_mask,
            init_bias=0.1,
            initialization='uniform-positive',
            loss_function=torch.nn.L1Loss(reduction='mean'),#MovingAverageLoss(10),
            # loss_function=SoftDTW(True, 100, True, 20,
            #                       torch.nn.L1Loss(reduction='none')),#, _euclidean_squared_dist),
            # loss_function=partial(soft_dtw_normalized, gamma=1.0, normalize=True),
            verbose=0,
            compile=True,
            # shuffle_dim=(0, 1),
            device='cuda',
            # default_root_dir=os.path.join(os.path.dirname(LAB_root), 'logs'),
            gradient_clip_val=1,
            # accumulate_grad_batches=3,
            # reload_dataloaders_every_n_epochs=1,
            # regularization='L2',
            min_iter=5,
            # precision='16-mixed',
            dtype=torch.float32,
            testing=False,
        )
        torch.save(model.state_dict(), filename)
    model.load_state_dict(torch.load(filename))
    losses = model.losses
    # Re-instantiate the SliceTCA object with the same arguments as in decompose
    model = slicetca.core.SliceTCA(
        dimensions=list(trial_av.shape),
        ranks=(n_components[0], 0, 0, 0),
        positive=True,
        initialization='uniform-positive',
        dtype=torch.float32,
        lr=5e-4,
        weight_decay=partial(torch.optim.Adam, eps=1e-9),
        loss=torch.nn.L1Loss(reduction='mean'),
        init_bias=0.1,
        threshold=None,
        patience=None
    )
    model.load_state_dict(torch.load('model_All_freq.pt'))

    # plot the losses
    plt.figure(figsize=(4, 3), dpi=100)
    plt.plot(np.arange(10000, len(model.losses)), model.losses[10000:], 'k')
    plt.xlabel('iterations')
    plt.ylabel('mean squared error')
    plt.xlim(0, len(model.losses))
    plt.tight_layout()
    # # %% plot the model
    # idx1 = np.linspace(0, labels[0].shape[0], 8).astype(int)[1:-1]
    # idx2 = np.linspace(0, labels[1].shape[0], 6).astype(int)[1:-1]
    # timings = {'aud_ls': range(0, 200),
    #            'go_ls': range(200, 400),}
    #            # 'go_lm': range(800, 1000)}
    # components = model.get_components(numpy=True)
    # figs = {}
    # for cond, timing in timings.items():
    #     comp = model.get_components(numpy=True)
    #     comp[n] = [comp[n][1][..., timing]]
    #     # comp[n][1] = comp[n][2][..., timing]
    #     # comp[n][0] = np.array([])
    #     if cond.startswith('aud_l'):
    #         t_label = f"Time (s) from Stimulus"
    #     elif cond.startswith('go_lm'):
    #         t_label = f"Time (s) from Go Cue (Mime)"
    #     elif cond.startswith('go_ls'):
    #         t_label = f"Time (s) from Go Cue (Speak)"
    #     elif cond.startswith('go_jl'):
    #         t_label = f"Time (s) from Go Cue (:=:)"
    #     axes = slicetca.plot(model,
    #                          components=comp,
    #                          ignore_component=(0,),
    #                          variables=('channel',
    #                                     'freq',
    #                                     t_label),
    #                          sorting_indices=(None,
    #                                           None,
    #                                           # labels[1].astype(float).argsort()[::-1],
    #                                           None),
    #                          ticks=(None,
    #                                 None,
    #                                 # idx2[::-1],
    #                                 [0, 49, 99, 149, 199]),
    #                          tick_labels=(labels[0][idx1],
    #                                       None,
    #                                       # labels[1][idx2].astype(float).astype(int),
    #                                       [-0.5, 0, 0.5, 1, 1.5]),
    #                          cmap=parula_map)
    colors = ['orange', 'y', 'k', 'c', 'm', 'deeppink',
              'darkorange', 'lime', 'blue', 'red', 'purple']
    colors = colors[:n_components[0]]
    # # %% plot the sensory motors
    # plot_sm = False
    # if plot_sm:
    #     timingss = [{'aud_ls': range(0, 200),
    #                'go_ls': range(600, 800)},
    #                {'aud_jl': range(400, 600),
    #                 'go_jl': range(1000, 1200)}]
    #     fig, axs = plt.subplots(1, 2, figsize=(10, 4), dpi=100)
    #     ylims = [0, 0]
    #     lss = ['-', '--']
    #     for i, timings in enumerate(timingss):
    #         for j, (cond, time_slice) in enumerate(timings.items()):
    #             ax = axs[j]
    #             mat = np.nanmean(zscores[cond][:,sorted(SM)].__array__(), axis=(0,2,3))
    #             plot_dist(mat,#(trial_av.mean(1)*2).detach().cpu().numpy()[..., time_slice],
    #                             ax=ax, color='red', linestyle=lss[i], label=cond[-2:],
    #                       times=(-0.5, 1.5))
    #             if cond.startswith('go'):
    #                 event = "Go Cue"
    #             elif cond.startswith('aud'):
    #                 event = "Stimulus"
    #             if i == 0:
    #                 if j == 0:
    #                     # ax.legend()
    #                     ax.set_ylabel("Z-Score (V)")
    #             elif i == 1:
    #                 if j == 0:
    #                     ax.legend(loc='best')
    #
    #                 ax.set_xlabel("Time(s) from " + event)
    #             ylim = ax.get_ylim()
    #             ylims[1] = max(ylim[1], ylims[1])
    #             ylims[0] = min(ylim[0], ylims[0])
    #     for ax in axs:
    #         ax.set_ylim(ylims)
    #         ax.axhline(0, color='k', linestyle='--')
    #     fig.suptitle(idx_name)

    # %% plot the components
    mode = 'components'
    plot_components(model, 'components', all_con[:, 0], True)
    plt.suptitle(f"Components")

    # %% plot the components
    W, H = model.get_components(numpy=True)[0]
    # raise RuntimeError("Stop here")
    # W2 = (np.cov(
    #     model.forward().detach().cpu().numpy().reshape(W.shape[1],
    #                                                    -1)) @ W.T).T
    # H2 = H @ np.cov(
    #     model.forward().detach().cpu().numpy().reshape(-1, H.shape[-1]),
    #     rowvar=False)
    timingss = [{'aud_ls': slice(0, 200),
               'go_ls': slice(200, 400)},
                {'aud_lm': slice(0, 200),
                 'go_lm': slice(200, 400)},
                {'aud_jl': slice(0, 200),
                 'go_jl': slice(200, 400)}
                ]
    colors = colors[:n_components[0]]
    conds = {'aud_ls': (-0.5, 1.5),
             'go_ls': (-0.5, 1.5),
                'aud_lm': (-0.5, 1.5),
                'go_lm': (-0.5, 1.5),
             'aud_jl': (-0.5, 1.5),
             'go_jl': (-0.5, 1.5)}
    fig, axs = plt.subplots(n_components[n], 2, dpi=100)
    ylims = [[], []]
    # make a plot for each condition in conds as a subgrid
    for i, timings in enumerate(timingss):
        for j, (cond, times) in enumerate(timings.items()):
            for k in range(n_components[n]):
                ax = axs[k, j]
                if i == 0:
                    ls = '-'
                elif i == 1:
                    ls = '--'
                else:
                    ls = ':'
                plot_dist(
                    to_plot(mode, W, H, all_con[:, i], timings, k, cond, i),
                    ax=ax, color=colors[k], mode='sem', times=(-0.5, 1.5),
                    linestyle=ls, label=cond[3:])
                ylim = ax.get_ylim()
                ylims[1].append(ylim[1])
                ylims[0].append(ylim[0])
                if j == 1 and i == 2:
                    ax.legend()

            if cond.startswith('go'):
                event = "Go Cue"
            elif cond.startswith('aud'):
                event = "Stimulus"

            #     ax.set_ylabel("Z-Score (V)")

            ax.set_xlabel("Time(s) from " + event)

    for ax in axs.flat:
        ax.set_ylim((min(ylims[0]), max(ylims[1])))
    # plt.suptitle(f"Components")
    fig.supylabel('Z-Score (V)')

    # %% plot the region membership
    from ieeg.viz.mri import electrode_gradient, electrode_ratio_gradient
    W, H = model.get_components(numpy=True)[0]
    W2 = (np.cov(
        model.forward().detach().cpu().numpy().reshape(W.shape[1],
                                                       -1)) @ W.T).T
    chans = ['-'.join([f"D{int(ch.split('-')[0][1:])}", ch.split('-')[1]]) for
             ch in labels[0]]
    subj = sorted(set(ch.split('-')[0] for ch in chans))
    electrode_gradient(layout.get_subjects(), W * 2, chans, colors, mode='both', fig_dims=(W.shape[0],1))
    electrode_ratio_gradient(layout.get_subjects(), W, chans, 'brg')

    fig, axs = plt.subplots(2, 3)
    from itertools import combinations
    for i, (w1, w2) in enumerate(combinations(range(4), 2)):
        ax = axs.flat[i]
        ax.scatter(W[w1], W[w2])
        ax.set_title(f'{colors[w1]} vs {colors[w2]}')
        ax.set_xlabel(f'{colors[w1]}')
        ax.set_ylabel(f'{colors[w2]}')
        ax.set_ylim(0, .5)
        ax.set_xlim(0, .5)

    # %%
    from ieeg.viz.mri import gen_labels, subject_to_info, Atlas
    import matplotlib.pyplot as plt

    # colors = ['Late Prod', 'WM', 'Feedback', 'Instructional', 'Early Prod']
    rois = ['IFG', 'Tha', 'PoG', 'Amyg', 'PhG', 'MVOcC', 'ITG', 'PrG', 'PCL',
            'IPL', 'MFG', 'CG', 'Pcun', 'BG',
            'INS', 'FuG', 'LOcC', 'STG', 'OrG', 'MTG', 'pSTS', 'Hipp', 'SFG',
            'SPL']
    names = ['orange', 'yellow', 'black', 'cyan', 'magenta', 'deeppink',
             'darkorange', 'lime', 'blue', 'red', 'purple']
    atlas = Atlas()
    fig, axs = plt.subplots(n_components[0], 1)
    split = (l.split('-') for l in labels[0])
    lzfilled = (f"D{s[1:].zfill(4)}-{ch}" for s, ch in split)
    sm_idx = [labels[0].tolist().index(l) for l in lzfilled]
    # plot_on_average(layout.get_subjects(),
    #                 picks=[f"D{int(xi[1:5])}{xi[5:]}" for xi in
    #                        labels[0][torch.tensor(sm_idx)[
    #                            (W[1] / W.sum(0)) > 0.45]]], hemi='both',
    #                 size=W[0, (W[1] / W.sum(0)) > 0.45], label_every=1)
    idxs = [torch.tensor(sm_idx)[
                (W[i] / W.sum(0)) > 0.4
                # W.argmax(0) == i
                ].tolist() for i in range(n_components[0])]
    ylims = [0, 0]
    all_groups = []
    for idx in idxs:
        sm_elecs = labels[0][idx]
        groups = {r: [] for r in rois}
        for subj in layout.get_subjects():
            subj_old = f"D{int(subj[1:])}"
            info = subject_to_info(subj_old)
            ch_labels = gen_labels(info, subj_old, atlas='.BN_atlas')
            for key, value in ch_labels.items():
                item = subj + '-' + key
                if item in sm_elecs:
                    roi = value.split("_")[0]
                    try:
                        area = atlas[value.split("_")[0]].gyrus
                    except KeyError as e:
                        if value.split("_")[0] == 'TE1.0/TE1.2':
                            area = 'STG'
                        else:
                            print(e)
                            continue
                    if area in groups.keys():
                        groups[area].append(subj + '-' + key)
        groups_num = {key: len(value) for key, value in groups.items()}
        all_groups.append(groups_num)
        # plot the histogram, with

    filtered_groups_num = [{} for _ in range(n_components[0])]
    for roi in rois:
        # new_roi = atlas.abbreviations[roi]
        new_roi = roi
        if any(group[roi] > 0 for group in all_groups):
            for i, group in enumerate(all_groups):
                filtered_groups_num[i][new_roi] = group[roi]
    for i, (c, ax) in enumerate(zip(names, axs)):
        ax.bar(filtered_groups_num[i].keys(), filtered_groups_num[i].values())
        plt.sca(ax)
        # if ax is axs[-1]:
        if True:
            plt.xticks(rotation=45)
        else:
            plt.xticks([])
        ax.set_ylabel(f"{c}")
        ylim = ax.get_ylim()
        ylims[1] = max(ylim[1], ylims[1])
        ylims[0] = min(ylim[0], ylims[0])
    for ax in axs:
        ax.set_ylim(ylims)

    # %% plot each component trials
    W, H = model.get_components(numpy=True)[0]
    colors = ['orange', 'y', 'k', 'c', 'm', 'deeppink',
              'darkorange', 'lime', 'blue', 'red', 'purple'
                ]
    colors = colors[:W.shape[0]]
    timings = {'aud_ls': range(0, 200),
                'go_ls': range(200, 400)}
    conds = {'aud_ls': (-0.5, 1.5),
             'go_ls': (-0.5, 1.5)}
    n_comp = W.shape[0]
    fig, axs = plt.subplots(2*len(timings), n_comp)
    data = neural_data_tensor.nanmean((1, 2)).detach().cpu().numpy()
    for j, (cond, times) in enumerate(timings.items()):
        j *= 2
        ylims = [0, 0]
        for i, ax in enumerate(axs[0 + j]):
            trimmed = data[(W[i] / W.sum(0)) > 0.4][:, times]
            sorted_trimmed = trimmed[
                                 np.argsort(W[i, (W[i] / W.sum(0)) > 0.4])][
                             ::-1]
            plot_dist(trimmed.reshape(-1, 200), ax=ax, color=colors[i],
                      mode='sem', times=conds[cond])
            ax.set_xticks([])
            ax.set_xticklabels([])
            ylims[1] = max(ax.get_ylim()[1], ylims[1])
            ylims[0] = min(ax.get_ylim()[0], ylims[0])

            scale = np.mean(sorted_trimmed) + 1.5 * np.std(sorted_trimmed)
            axs[1 + j, i].imshow(sorted_trimmed, aspect='auto', cmap='inferno',
                                 vmin=0, vmax=scale,
                                 extent=[conds[cond][0], conds[cond][-1], 0,
                                         len(sorted_trimmed)])

            if i > 0:
                axs[0 + j, i].set_yticks([])
                axs[0 + j, i].set_yticklabels([])
                axs[1 + j, i].set_yticks([])
                axs[1 + j, i].set_yticklabels([])
            else:
                axs[0 + j, i].set_ylabel("Z-Score (V)")
                axs[1 + j, i].set_ylabel("Channels")
            if i == n_components[n] // 2:
                axs[0 + j, i].set_title(f"{cond}")

        for ax in axs[0 + j]:
            ax.set_ylim(ylims)
        # fig.suptitle(cond)
        fig.tight_layout()

    # # %% plot the components
    # colors = colors[:n_components[0]]
    # conds = {'aud_ls': (-0.5, 1.5),
    #          'go_ls': (-0.5, 1.5),
    #          'resp': (-1, 1)}
    # fig, axs = plt.subplots(1, 3)
    #
    # # make a plot for each condition in conds as a subgrid
    # for j, (cond, times) in enumerate(conds.items()):
    #     ax = axs[j]
    #     start = 200 * j
    #     end = start + 200
    #     for i in range(n_components[0]):
    #         fig = plot_dist(
    #             # H[i],
    #             model.construct_single_component(0, i).detach().numpy()[
    #             (W[i] / W.sum(0)) > 0.3, ..., start:end].reshape(-1, 200),
    #             ax=ax, color=colors[i], mode='sem', times=times)
    #     if j == 0:
    #         ax.legend()
    #         ax.set_ylabel("Z-Score (V)")
    #         ylims = ax.get_ylim()
    #     elif j == 1:
    #         ax.set_xlabel("Time(s)")
    #     ax.set_ylim(ylims)
    #     ax.set_title(cond)
